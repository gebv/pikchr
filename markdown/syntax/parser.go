// Code generated by goyacc -p md -o parser.go parser.y. DO NOT EDIT.

//line parser.y:2
package syntax

import __yyfmt__ "fmt"

//line parser.y:2

import "fmt"

//line parser.y:8
type mdSymType struct {
	yys    int
	token  Token
	block  Block
	blocks Blocks
}

const TOKEN = 57346
const NEWLINE = 57347
const T_CODE_BLOCK = 57348
const WHITESPACE = 57349

var mdToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"TOKEN",
	"NEWLINE",
	"T_CODE_BLOCK",
	"WHITESPACE",
}

var mdStatenames = [...]string{}

const mdEofCode = 1
const mdErrCode = 2
const mdInitialStackSize = 16

//line yacctab:1
var mdExca = [...]int{
	-1, 1,
	1, -1,
	-2, 0,
}

const mdPrivate = 57344

const mdLast = 27

var mdAct = [...]int{
	3, 19, 1, 11, 9, 5, 18, 10, 16, 9,
	5, 7, 10, 8, 9, 5, 17, 10, 9, 13,
	14, 10, 4, 15, 2, 12, 6,
}

var mdPact = [...]int{
	5, -1000, 5, -1000, -1000, -1000, 14, 10, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 0, -1000, -1000, -4, -1000,
}

var mdPgo = [...]int{
	0, 13, 0, 22, 26, 24, 23, 2,
}

var mdR1 = [...]int{
	0, 7, 7, 5, 5, 5, 5, 6, 6, 2,
	2, 3, 4, 4, 1, 1,
}

var mdR2 = [...]int{
	0, 1, 0, 1, 2, 1, 2, 1, 2, 1,
	2, 4, 1, 2, 1, 1,
}

var mdChk = [...]int{
	-1000, -7, -5, -2, -3, 5, -4, 6, -1, 4,
	7, -2, -3, 5, -1, -6, -2, -2, 6, 5,
}

var mdDef = [...]int{
	2, -2, 1, 3, 5, 9, 0, 0, 12, 14,
	15, 4, 6, 10, 13, 0, 7, 8, 0, 11,
}

var mdTok1 = [...]int{
	1,
}

var mdTok2 = [...]int{
	2, 3, 4, 5, 6, 7,
}

var mdTok3 = [...]int{
	0,
}

var mdErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	mdDebug        = 0
	mdErrorVerbose = false
)

type mdLexer interface {
	Lex(lval *mdSymType) int
	Error(s string)
}

type mdParser interface {
	Parse(mdLexer) int
	Lookahead() int
}

type mdParserImpl struct {
	lval  mdSymType
	stack [mdInitialStackSize]mdSymType
	char  int
}

func (p *mdParserImpl) Lookahead() int {
	return p.char
}

func mdNewParser() mdParser {
	return &mdParserImpl{}
}

const mdFlag = -1000

func mdTokname(c int) string {
	if c >= 1 && c-1 < len(mdToknames) {
		if mdToknames[c-1] != "" {
			return mdToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func mdStatname(s int) string {
	if s >= 0 && s < len(mdStatenames) {
		if mdStatenames[s] != "" {
			return mdStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func mdErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !mdErrorVerbose {
		return "syntax error"
	}

	for _, e := range mdErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + mdTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := mdPact[state]
	for tok := TOKSTART; tok-1 < len(mdToknames); tok++ {
		if n := base + tok; n >= 0 && n < mdLast && mdChk[mdAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if mdDef[state] == -2 {
		i := 0
		for mdExca[i] != -1 || mdExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; mdExca[i] >= 0; i += 2 {
			tok := mdExca[i]
			if tok < TOKSTART || mdExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if mdExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += mdTokname(tok)
	}
	return res
}

func mdlex1(lex mdLexer, lval *mdSymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = mdTok1[0]
		goto out
	}
	if char < len(mdTok1) {
		token = mdTok1[char]
		goto out
	}
	if char >= mdPrivate {
		if char < mdPrivate+len(mdTok2) {
			token = mdTok2[char-mdPrivate]
			goto out
		}
	}
	for i := 0; i < len(mdTok3); i += 2 {
		token = mdTok3[i+0]
		if token == char {
			token = mdTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = mdTok2[1] /* unknown char */
	}
	if mdDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", mdTokname(token), uint(char))
	}
	return char, token
}

func mdParse(mdlex mdLexer) int {
	return mdNewParser().Parse(mdlex)
}

func (mdrcvr *mdParserImpl) Parse(mdlex mdLexer) int {
	var mdn int
	var mdVAL mdSymType
	var mdDollar []mdSymType
	_ = mdDollar // silence set and not used
	mdS := mdrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	mdstate := 0
	mdrcvr.char = -1
	mdtoken := -1 // mdrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		mdstate = -1
		mdrcvr.char = -1
		mdtoken = -1
	}()
	mdp := -1
	goto mdstack

ret0:
	return 0

ret1:
	return 1

mdstack:
	/* put a state and value onto the stack */
	if mdDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", mdTokname(mdtoken), mdStatname(mdstate))
	}

	mdp++
	if mdp >= len(mdS) {
		nyys := make([]mdSymType, len(mdS)*2)
		copy(nyys, mdS)
		mdS = nyys
	}
	mdS[mdp] = mdVAL
	mdS[mdp].yys = mdstate

mdnewstate:
	mdn = mdPact[mdstate]
	if mdn <= mdFlag {
		goto mddefault /* simple state */
	}
	if mdrcvr.char < 0 {
		mdrcvr.char, mdtoken = mdlex1(mdlex, &mdrcvr.lval)
	}
	mdn += mdtoken
	if mdn < 0 || mdn >= mdLast {
		goto mddefault
	}
	mdn = mdAct[mdn]
	if mdChk[mdn] == mdtoken { /* valid shift */
		mdrcvr.char = -1
		mdtoken = -1
		mdVAL = mdrcvr.lval
		mdstate = mdn
		if Errflag > 0 {
			Errflag--
		}
		goto mdstack
	}

mddefault:
	/* default state action */
	mdn = mdDef[mdstate]
	if mdn == -2 {
		if mdrcvr.char < 0 {
			mdrcvr.char, mdtoken = mdlex1(mdlex, &mdrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if mdExca[xi+0] == -1 && mdExca[xi+1] == mdstate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			mdn = mdExca[xi+0]
			if mdn < 0 || mdn == mdtoken {
				break
			}
		}
		mdn = mdExca[xi+1]
		if mdn < 0 {
			goto ret0
		}
	}
	if mdn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			mdlex.Error(mdErrorMessage(mdstate, mdtoken))
			Nerrs++
			if mdDebug >= 1 {
				__yyfmt__.Printf("%s", mdStatname(mdstate))
				__yyfmt__.Printf(" saw %s\n", mdTokname(mdtoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for mdp >= 0 {
				mdn = mdPact[mdS[mdp].yys] + mdErrCode
				if mdn >= 0 && mdn < mdLast {
					mdstate = mdAct[mdn] /* simulate a shift of "error" */
					if mdChk[mdstate] == mdErrCode {
						goto mdstack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if mdDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", mdS[mdp].yys)
				}
				mdp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if mdDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", mdTokname(mdtoken))
			}
			if mdtoken == mdEofCode {
				goto ret1
			}
			mdrcvr.char = -1
			mdtoken = -1
			goto mdnewstate /* try again in the same state */
		}
	}

	/* reduction by production mdn */
	if mdDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", mdn, mdStatname(mdstate))
	}

	mdnt := mdn
	mdpt := mdp
	_ = mdpt // guard against "declared and not used"

	mdp -= mdR2[mdn]
	// mdp is now the index of $0. Perform the default action. Iff the
	// reduced production is Îµ, $1 is possibly out of range.
	if mdp+1 >= len(mdS) {
		nyys := make([]mdSymType, len(mdS)*2)
		copy(nyys, mdS)
		mdS = nyys
	}
	mdVAL = mdS[mdp+1]

	/* consult goto table to find next state */
	mdn = mdR1[mdn]
	mdg := mdPgo[mdn]
	mdj := mdg + mdS[mdp].yys + 1

	if mdj >= mdLast {
		mdstate = mdAct[mdg]
	} else {
		mdstate = mdAct[mdj]
		if mdChk[mdstate] != -mdn {
			mdstate = mdAct[mdg]
		}
	}
	// dummy call; replaced with literal code
	switch mdnt {

	case 1:
		mdDollar = mdS[mdpt-1 : mdpt+1]
//line parser.y:23
		{
			mdlex.(*lexer).result.AddBlock(mdDollar[1].blocks...)
		}
	case 3:
		mdDollar = mdS[mdpt-1 : mdpt+1]
//line parser.y:28
		{
			if mdDebug == 1 {
				fmt.Println(" ->", mdDollar[1].block)
			}

			mdVAL.blocks = Blocks{mdDollar[1].block}
		}
	case 4:
		mdDollar = mdS[mdpt-2 : mdpt+1]
//line parser.y:35
		{
			if mdDebug == 1 {
				fmt.Println(" ->", mdDollar[2].block)
			}
			mdVAL.blocks = append(mdDollar[1].blocks, mdDollar[2].block)
		}
	case 5:
		mdDollar = mdS[mdpt-1 : mdpt+1]
//line parser.y:41
		{
			if mdDebug == 1 {
				fmt.Println(" ->", mdDollar[1].block)
			}
			mdVAL.blocks = Blocks{mdDollar[1].block}
		}
	case 6:
		mdDollar = mdS[mdpt-2 : mdpt+1]
//line parser.y:47
		{
			if mdDebug == 1 {
				fmt.Println(" ->", mdDollar[2].block)
			}
			mdVAL.blocks = append(mdDollar[1].blocks, mdDollar[2].block)
		}
	case 7:
		mdDollar = mdS[mdpt-1 : mdpt+1]
//line parser.y:55
		{
			mdVAL.blocks = Blocks{mdDollar[1].block}
		}
	case 8:
		mdDollar = mdS[mdpt-2 : mdpt+1]
//line parser.y:57
		{
			mdDollar[1].blocks.AddBlock(mdDollar[2].block)
			mdVAL.blocks = mdDollar[1].blocks
		}
	case 9:
		mdDollar = mdS[mdpt-1 : mdpt+1]
//line parser.y:63
		{
			block := &LineBlock{}
			block.AddToken(mdDollar[1].token)
			mdVAL.block = block
		}
	case 10:
		mdDollar = mdS[mdpt-2 : mdpt+1]
//line parser.y:68
		{
			mdDollar[1].block.(*LineBlock).AddToken(mdDollar[2].token)
			mdVAL.block = mdDollar[1].block
		}
	case 11:
		mdDollar = mdS[mdpt-4 : mdpt+1]
//line parser.y:76
		{
			mdVAL.block = NewCodeBlock(mdDollar[1].token, mdDollar[3].token, mdDollar[2].blocks...)
		}
	case 12:
		mdDollar = mdS[mdpt-1 : mdpt+1]
//line parser.y:82
		{
			block := &LineBlock{}
			block.AddToken(mdDollar[1].token)
			mdVAL.block = block
		}
	case 13:
		mdDollar = mdS[mdpt-2 : mdpt+1]
//line parser.y:87
		{
			mdDollar[1].block.(*LineBlock).AddToken(mdDollar[2].token)
			mdVAL.block = mdDollar[1].block
		}
	}
	goto mdstack /* stack new state and value */
}
